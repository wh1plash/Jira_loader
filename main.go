package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"syscall"
	"time"

	"github.com/joho/godotenv"
)

func init() {
	mustLoadEnvVariables()
}

func mustLoadEnvVariables() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}
}

type Order struct {
	Type      string
	Count     int
	Region    int
	ProjectID int
	SerialNum int
	DateTo    time.Time
	Serie     int
}

type Status struct {
	Name string `json:"name"`
}

type Fields struct {
	Summary string `json:"summary,omitempty"`
	Status  `json:"status"`
}

type Queue struct {
	Values []struct {
		ID     string `json:"id"`
		Key    string `json:"key"`
		Self   string `json:"self"`
		Fields `json:"fields"`
	} `json:"values"`
}

type Task struct {
	ID     string `json:"id"`
	Self   string `json:"self"`
	Key    string `json:"key"`
	Fields struct {
		Attachment []struct {
			FileName string `json:"filename"`
			Content  string `json:"content"`
		} `json:"attachment"`
	} `json:"fields"`
}

type HTTPClient struct {
	client  *http.Client
	baseUrl string
}

func NewHTTPClient(url string) *HTTPClient {
	return &HTTPClient{
		client:  &http.Client{},
		baseUrl: url,
	}
}

func runFetcher(sigch chan os.Signal) {
	baseurl := os.Getenv("baseUrl")
	transitionID := os.Getenv("transitionID")
	client := NewHTTPClient(baseurl)
	ticker := time.NewTicker(5 * time.Second)
	defer ticker.Stop()

loop:
	for {
		select {
		case <-sigch:
			fmt.Println("Stopping Jira fetcher")
			break loop
		case <-ticker.C:
			queues := client.GetQueues(os.Getenv("queueUrl"))
			tasks := task(queues)

			for _, i := range tasks {
				t := client.GetTask(i)
				client.setStatus(t.Self, transitionID)
				client.addComment(t.Self)
				for _, a := range t.Fields.Attachment {
					client.GetAttachment(a.FileName, a.Content)
				}
			}
		}
	}
}

func main() {
	sigch := make(chan os.Signal, 1)
	signal.Notify(sigch, syscall.SIGINT, syscall.SIGTERM)
	go runFetcher(sigch)

	<-sigch

	fmt.Println("Exit programm")
}

func seveOrderFile(b []byte, fileName string) (string, error) {
	currentDate := time.Now().Format("2006-01-02")
	dir := filepath.Join("./downloads", currentDate)
	if err := os.MkdirAll(dir, os.ModePerm); err != nil {
		log.Fatal("error to create folder to download order", err)
	}

	filePath := filepath.Join(dir, fileName)

	file, err := os.Create(filePath)
	if err != nil {
		log.Fatal("error to create file:", err)
	}
	defer file.Close()

	if _, err := file.Write(b); err != nil {
		log.Fatal("can`t write file:", err)
	}

	return filePath, nil
}

func (c *HTTPClient) setStatus(taskUrl string, statusID string) {
	url := fmt.Sprintf("%s/transitions", taskUrl)
	body := map[string]any{
		"transition": map[string]string{
			"id": statusID},
	}
	jsonBody, _ := json.Marshal(body)

	resp, err := c.setRequest("POST", url, bytes.NewReader(jsonBody))
	if err != nil {
		fmt.Println("can`t change status", err)
	}
	defer resp.Body.Close()

}

func (c *HTTPClient) addComment(taskUrl string) {
	comment := "Generated by autoresponder"
	url := fmt.Sprintf("%s/comment", taskUrl)
	body := map[string]string{"body": comment}
	jsonBody, _ := json.Marshal(body)

	resp, err := c.setRequest("POST", url, bytes.NewReader(jsonBody))
	if err != nil {
		fmt.Println("can`t add new comment", err)
	}
	defer resp.Body.Close()

}

func (c *HTTPClient) GetAttachment(fileName string, content string) {
	resp, err := c.setRequest("GET", content, nil)
	if err != nil {
		log.Fatal("error to get attachment", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Fatal(err)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("error to read from body", err)
	}

	filePath, err := seveOrderFile(body, fileName)
	if err != nil {
		log.Fatal("error to seve file", err)
	}

	fmt.Printf("file successfuly saved to: %s\n", filePath)

}

func (c *HTTPClient) GetTask(taskUrl string) Task {
	resp, err := c.setRequest("GET", taskUrl, nil)
	if err != nil {
		log.Fatal("error to get task", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Fatal("can`t get task", err)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("error to read body", err)
	}

	var task Task
	if err := json.Unmarshal(body, &task); err != nil {
		log.Fatal("error to unmarshal body:", err)
	}
	return task
}

func (c *HTTPClient) setRequest(method string, url string, body io.Reader) (*http.Response, error) {
	req, err := http.NewRequest(method, url, body)
	if err != nil {
		return nil, err
	}

	headerKey := "X-ExperimentalApi"
	headerVal := "opt-in"

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set(headerKey, headerVal)
	req.SetBasicAuth(os.Getenv("user"), os.Getenv("pass"))

	resp, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *HTTPClient) GetQueues(addUrl string) Queue {
	url := fmt.Sprintf("%s/%s", c.baseUrl, addUrl)

	resp, err := c.setRequest("GET", url, nil)
	if err != nil {
		log.Fatal("error to get Queues", err)
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Fatal("can`t get queues", err)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("error to read body", err)
	}

	var queues Queue
	if err := json.Unmarshal(body, &queues); err != nil {
		log.Fatal("error to unmarshal body", err)
	}
	return queues
}

func task(q Queue) []string {
	var tasksUrl []string
	for _, queue := range q.Values {
		if queue.Status.Name == "Open" {
			tasksUrl = append(tasksUrl, queue.Self)
		}
	}
	return tasksUrl
}
