package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
)

func NewHTTPClient(url string) *HTTPClient {
	return &HTTPClient{
		client:  &http.Client{},
		baseUrl: url,
	}
}

func (c *HTTPClient) setStatus(taskUrl string, statusID string) {
	url := fmt.Sprintf("%s/transitions", taskUrl)
	body := map[string]any{
		"transition": map[string]string{
			"id": statusID},
	}
	jsonBody, _ := json.Marshal(body)

	resp, err := c.doRequest("POST", url, bytes.NewReader(jsonBody))
	if err != nil {
		fmt.Println("can`t change status", err)
	}
	defer resp.Body.Close()

}

func (c *HTTPClient) addComment(taskUrl string) {
	comment := "Generated by autoresponder"
	url := fmt.Sprintf("%s/comment", taskUrl)
	body := map[string]string{"body": comment}
	jsonBody, _ := json.Marshal(body)

	resp, err := c.doRequest("POST", url, bytes.NewReader(jsonBody))
	if err != nil {
		fmt.Println("can`t add new comment", err)
	}
	defer resp.Body.Close()

}

func (c *HTTPClient) GetAttachment(fileName string, content string) {
	resp, err := c.doRequest("GET", content, nil)
	if err != nil {
		log.Fatal("error to get attachment", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Fatal(err)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("error to read from body", err)
	}

	filePath, err := seveOrderFile(body, fileName)
	if err != nil {
		log.Fatal("error to seve file", err)
	}

	fmt.Printf("file successfuly saved to: %s\n", filePath)

}

func (c *HTTPClient) GetTask(taskUrl string) Task {
	resp, err := c.doRequest("GET", taskUrl, nil)
	if err != nil {
		log.Fatal("error to get task", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Fatal("can`t get task", err)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("error to read body", err)
	}

	var task Task
	if err := json.Unmarshal(body, &task); err != nil {
		log.Fatal("error to unmarshal body:", err)
	}
	return task
}

func (c *HTTPClient) doRequest(method string, url string, body io.Reader) (*http.Response, error) {
	req, err := http.NewRequest(method, url, body)
	if err != nil {
		return nil, err
	}

	headerKey := "X-ExperimentalApi"
	headerVal := "opt-in"

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set(headerKey, headerVal)
	req.SetBasicAuth(os.Getenv("user"), os.Getenv("pass"))

	resp, err := c.client.Do(req)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (c *HTTPClient) GetQueues(addUrl string) Queue {
	url := fmt.Sprintf("%s/%s", c.baseUrl, addUrl)

	resp, err := c.doRequest("GET", url, nil)
	if err != nil {
		log.Fatal("error to get Queues", err)
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		log.Fatal("can`t get queues", err)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatal("error to read body", err)
	}

	var queues Queue
	if err := json.Unmarshal(body, &queues); err != nil {
		log.Fatal("error to unmarshal body", err)
	}
	return queues
}
